${
	[1].map(() => {
  	const namespaces = ['default'];
  	const ns = location.search.ns || 'default';
  	const dc = location.search.dc;
  	const service = location.pathname.get(2);

		const resolvers = range(
    	env(
      	'CONSUL_RESOLVER_COUNT',
      	Math.floor(
        	(
          	Math.random() * env('CONSUL_RESOLVER_MAX', 10)
        	) + parseInt(env('CONSUL_RESOLVER_MIN', 1))
      	)
    	)
  	).map(() => ({
			Name: fake.hacker.noun().split(' ').join('-'),
			Subsets: range(
    			env(
      			'CONSUL_SUBSET_COUNT',
      			Math.floor(
        			(
          			Math.random() * env('CONSUL_SUBSET_MAX', 3)
        			) + parseInt(env('CONSUL_SUBSET_MIN', 1))
      			)
    			)
  			).map((item) => `v${item + 1}`)
  	}));

		const resolverTargets = resolvers.reduce(
			function(prev, resolver) {
				const targets = [`${resolver.Name}.${ns}.${dc}`];
				return prev.concat(targets.concat(
					resolver.Subsets.map(
						function(item) {
							return `${item}.${targets[0]}`
						}
					)
				).map(
					(item) => `resolver:${item}`
				));
			},
			[]
		);
		const splitters = range(
    	env(
      	'CONSUL_SPLITTER_COUNT',
      	Math.floor(
        	(
          	Math.random() * env('CONSUL_SPLITTER_MAX', 5)
        	) + parseInt(env('CONSUL_SPLITTER_MIN', 1))
      	)
    	)
  	).map(() => ({
			Name: `${service}-${fake.hacker.noun()}`,
			Splits: range(
    		env(
      		'CONSUL_SPLIT_COUNT',
      		Math.floor(
        		(
          		Math.random() * env('CONSUL_SPLIT_MAX', 10)
        		) + parseInt(env('CONSUL_SPLIT_MIN', 1))
      		)
    		)
  		).map((item, i, arr) => ({
        "Weight": 100 / arr.length,
        "NextNode": fake.helpers.randomize(resolverTargets)
      }))
		}));
		const splitterTargets = splitters.map(
			function(item) {
				return `splitter:${item.Name}`;
			}
		);
		const nextNodes = resolverTargets.concat(splitterTargets);
		return `
{
  "Chain": {
    "ServiceName": "${service}",
${typeof location.search.ns !== 'undefined' ? `
    "Namespace": "${ns}",
` : ``}
    "Datacenter": "${dc}",
    "Protocol": "http",
    "StartNode": "router:${service}",
    "Nodes": {

      "router:${service}": {
        "Type": "router",
        "Name": "${service}",
        "Routes": [
${
  range(
    env(
      'CONSUL_ROUTE_COUNT',
      Math.floor(
        (
          Math.random() * env('CONSUL_ROUTE_MAX', 10)
        ) + parseInt(env('CONSUL_ROUTE_MIN', 1))
      )
    )
  ).map((item, i) => {
		const path = fake.helpers.randomize(['PathExact', 'PathPrefix', 'PathRegex', '']);
		const splitter = fake.helpers.randomize(splitters);
		return `
          {
            "NextNode": "${fake.random.boolean() ? fake.helpers.randomize(splitterTargets) : fake.helpers.randomize(resolverTargets)}",
            "Definition": {
              "Match": {
                "HTTP": {
${ path !== '' ? `
                  "${path}": "${path === 'PathRegex' ? `${fake.helpers.randomize(['^[0-9]{1,3}?$', '(\w+)\s(\w+)'])}` : `/${fake.lorem.words(fake.random.number({min: 1, max: 5})).split(' ').join('/')}${fake.random.boolean() ? fake.system.fileName() : ''}`}"
` : `"": ""`}
${ fake.random.boolean() ? `
                  ,"Header": [
${
	range(
    env(
      'CONSUL_HEADER_COUNT',
      Math.floor(
        (
          Math.random() * env('CONSUL_HEADER_MAX', 3)
        ) + parseInt(env('CONSUL_HEADER_MIN', 1))
      )
    )
	).map(item => `
										{
											"Name": "X-${fake.hacker.noun().split(' ').map(item => `${item.substr(0, 1).toUpperCase()}${item.substr(1)}`).join('-')}",
	${fake.random.boolean() ? `
											"Invert": true,
			` : ``
	}
	${fake.helpers.randomize([
											'"Present": true',
											'"Exact": true',
											'"Prefix": "abc"',
											'"Suffix": "xyz"',
											'"Regex": "[abc]"'
	])}
										}
	`)}
                  ]
` : ``}
${ fake.random.boolean() ? `
                  ,"QueryParam": [
${
	range(
    env(
      'CONSUL_QUERYPARAM_COUNT',
      Math.floor(
        (
          Math.random() * env('CONSUL_QUERYPARAM_MAX', 3)
        ) + parseInt(env('CONSUL_QUERYPARAM_MIN', 1))
      )
    )
	).map(item => `
										{
											"Name": "${fake.hacker.noun().split(' ').join('-')}",
	${fake.helpers.randomize([
											'"Present": true',
											'"Exact": true',
											'"Prefix": "abc"',
											'"Suffix": "xyz"',
											'"Regex": "[abc]"'
	])}
										}
	`)}
                  ]
` : ``}
${ fake.random.boolean() ? `
                  ,"Methods": [
										${
											fake.helpers.shuffle(
												["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH"]
											).filter(item => fake.random.boolean()).map(item => `
												"${item}"
											`)
										}
									]
` : ``}
                }
              },
              "Destination": {
                "Service": "${service}",
                "PrefixRewrite": "/"
              }
            }
          }
`;})}
        ]
      },
${resolvers.map((resolver) => {
	const id = `${resolver.Name}.${ns}.${dc}`;
	const failover = `${resolver.Name}.${ns}`;
	return `
			"resolver:${id}": {
        "Type": "resolver",
      	"Name": "${id}",
        "Resolver": {
          "ConnectTimeout": "5s",
${fake.random.boolean() ? `
          "Failover": {
            "Targets": [
  ${
    range(
      env(
        'CONSUL_FAILOVER_COUNT',
        fake.random.number({min: 1, max: 3})
      )
    ).map((item) => `
              "${failover}.dc-${item + 1}"
	  `)
  }
            ]
          },
` : `` }
          "Target": "${id}"
        }
			},
			${resolver.Subsets.map((subset) => {
				const id = `${subset}.${resolver.Name}.${ns}.${dc}`;
	      const failover = `${subset}.${resolver.Name}.${ns}`;
				return `
      		"resolver:${id}": {
        		"Type": "resolver",
        		"Name": "${id}",
        		"Resolver": {
          		"ConnectTimeout": "5s",
${fake.random.boolean() ? `
              "Failover": {
                "Targets": [
  ${
    range(
      env(
        'CONSUL_FAILOVER_COUNT',
        fake.random.number({min: 1, max: 3})
      )
    ).map((item) => `
                  "${failover}.dc-${item + 1}"
	  `)
  }
                ]
              },
` : `` }
          		"Target": "${id}"
        		}
      		}
				`;
			})}
`})},
${splitters.map((item, i) => `
      "splitter:${item.Name}": {
        "Type": "splitter",
        "Name": "${item.Name}",
        "Splits": [
  ${item.Splits.map((item) => `
    			{
      			"Weight": ${item.Weight},
      			"NextNode": "${item.NextNode}"
    			}
	`)}
        ]
      }
`)}
    },
    "Targets": {
${resolvers.map((item) => {
	const id = `${item.Name}.${ns}.${dc}`;
	const name = `${id}.internal.b4786482-efc4-9791-2e93-6fce8f2580d9.consul`;
	return `
		"${id}": {
      	"ID": "${id}",
      	"Service": "${item.Name}",
      	"Namespace": "${ns}",
      	"Datacenter": "${dc}",
      	"MeshGateway": {
      	},
      	"SNI": "${name}",
      	"Name": "${name}"
		},
		${item.Subsets.map((ktem) => {
			const id = `${ktem}.${item.Name}.${ns}.${dc}`;
			const name = `${id}.internal.b4786482-efc4-9791-2e93-6fce8f2580d9.consul`;
			return `
      		"${id}": {
        		"ID": "${id}",
        		"Service": "${item.Name}",
        		"ServiceSubset": "${ktem}",
        		"Namespace": "${ns}",
        		"Datacenter": "${dc}",
        		"MeshGateway": {
        		},
        		"Subset": {
          		"Filter": "Service.Meta.value == ${ktem}"
        		},
        		"SNI": "${name}",
        		"Name": "${name}"
      		}
			`})}
`})}
    }
  }
}
`})}
