{
  "status": "success",
  "data": {
    "resultType": "matrix",
    "result": [
      {
        "metric": {},
        "values": [
          ${
            // We need 15 minutes worth of data at 10 second resoution
            [1].map(function(){
              var timePeriodMins = 15;
              var resolutionSecs = 10;
              var numPoints = (timePeriodMins*60)/resolutionSecs;
              var time = (Date.now()/1000) - (timePeriodMins*60);

              var q = location.search.query;
              var type = "rps";
              var range = 1000;
              var riseBias = 10;
              var fallBias = 10;
              var volatility = 0.2;

              if (q.match('envoy_response_code_class="5"')) {
                type = "er";
                range = 100; // up to 100% error rate
                fallBias = 1; // fall quicker than we rise
                volatility = 1;
              } else if (q.match('envoy_listener_http_downstream_rq_xx')) {
                type = "rps"
                range = 1000; // up to 1000 rps
              } else if (q.match('envoy_tcp_downstream_cx_rx_bytes_total')) {
                type = "rx";
                range = 10e8; // up to 100 mbps
              } else if (q.match('envoy_tcp_downstream_cx_rx_bytes_total')) {
                type = "tx";
                range = 10e9; // up to 1 gbps
              }

              var randExp = function(max, lambda) {
                return (-Math.log(1-(1-Math.exp(-lambda))*Math.random())/lambda) * max;
              }

              // Starting value
              var value = randExp(range, riseBias);
              if (value > range) {
                value = range;
              }

              var points = [];
              for (var i = 0; i < numPoints; i++) {
                points.push(`[${time}, "${value}"]`);
                time = time + resolutionSecs;
                var rising = (Math.random() > 0.5);
                delta = volatility * randExp(range, rising ? riseBias : fallBias);
                if (!rising) {
                  // Make it a negative change
                  delta = 0-delta;
                }
                value = value + delta
                if (value > range) {
                  value = range;
                }
                if (value < 0) {
                  value = 0;
                }
              }
              return points.join(",")
            })[0]
          }
        ]
      }
    ]
  }
}