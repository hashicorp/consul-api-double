${
  [1].map(() => {
    const dc = location.search.dc;

    // NOTE!!! The logic below to pick the upstream/downstream service
    // names must exactly match the logic in internal/ui/metrics-proxy/.../query
    // If you change this, change it there too!

    // Pick a number of down/upstreams to return based on the cookie variable.
    // If you change anything about this variable or it's default, you'll need
    // to change the topology endpoint to match.
    var numUp = env("CONSUL_UPSTREAM_COUNT", 3);
    var numDown = env("CONSUL_DOWNSTREAM_COUNT", 5);

    var genFakeServiceNames = function(num) {
      // Seed faker by the number of results we want to make it deterministic
      // here and in other correlated endpoints.
      fake.seed(num);
      var serviceNames = [];
      for (var i = 0; i < num; i++) {
        serviceNames.push(`service-${fake.random.number({min:0, max:99})}`)
      }
      return serviceNames
    };

    var upstreams = genFakeServiceNames(numUp);
    var downstreams = genFakeServiceNames(numDown);

    return `
{
  "Upstreams":
  [
    ${
      upstreams.map((item, i) => `
    {
      "Name": "service-${i}",
  ${i % 2 ? `
      "Datacenter": "${dc}",
  ` : `
      "Datacenter": "${fake.address.countryCode().toLowerCase()}_${ i % 2 ? "west" : "east"}-${i}",
  `}
  ${i === 1 ? `
        "Namespace": "default",
  ` : `
        "Namespace": "${fake.hacker.noun()}-ns-${i}",
  `}
      "ChecksPassing":${fake.random.number({min: 1, max: env('CONSUL_CHECK_COUNT', fake.random.number(10))})},
      "ChecksWarning":${fake.random.number({min: 0, max: env('CONSUL_CHECK_COUNT', fake.random.number(10))})},
      "ChecksCritical":${fake.random.number({min: 0, max: env('CONSUL_CHECK_COUNT', fake.random.number(10))})},
      "Intention": {
        "Allowed": ${fake.random.boolean()},
        "HasPermissions": ${fake.random.boolean()},
        "ExternalSource": "${fake.helpers.randomize(['nomad', 'kubernetes', ''])}"
      }
    }
  ],
  "Downstreams":
  [
    ${
      downstreams.map((item, i) => `
    {
      "Name": "${item}",
  ${i % 2 ? `
      "Datacenter": "${dc}",
  ` : `
      "Datacenter": "${fake.address.countryCode().toLowerCase()}_${ i % 2 ? "west" : "east"}-${i}",
  `}

  ${i === 1 ? `
        "Namespace": "default",
  ` : `
        "Namespace": "${fake.hacker.noun()}-ns-${i}",
  `}
      "ChecksPassing":${fake.random.number({min: 1, max: env('CONSUL_CHECK_COUNT', fake.random.number(10))})},
      "ChecksWarning":${fake.random.number({min: 0, max: env('CONSUL_CHECK_COUNT', fake.random.number(10))})},
      "ChecksCritical":${fake.random.number({min: 0, max: env('CONSUL_CHECK_COUNT', fake.random.number(10))})},
      "Intention": {
        "Allowed": ${fake.random.boolean()},
        "HasPermissions": ${fake.random.boolean()},
        "ExternalSource": "${fake.helpers.randomize(['nomad', 'kubernetes', ''])}"
      }
    }
    `)}
  ]
}`

  })
}